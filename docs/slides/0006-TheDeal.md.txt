

-----

<h1 style={{fontSize:'15vh', color: 'orange'}}>The Deal</h1>

<h1 className="borderline">1</h1>




-----

# So we will Use ...

```javascript className=codegiantshift

[ Symbol . toPrimitive ]


```

-----

# Symbol . toPrimitive for ES Lint Rule ...

```javascript className=codemedium

[ Symbol . toPrimitive ] // but for Runtime !

// Restrict eslint rules for Binary Operations AOT
rules: {
	'no-restricted-syntax': ['error', {
		selector: 'BinaryExpression[operator=\'+\']',
		message : 'syntax protocol error: +'
	}, {
		selector: 'BinaryExpression[operator=\'>\']',
		message : 'syntax protocol error: >'
	}],
}
```

-----

# Symbol . toPrimitive for ES Lint Rule ...

```javascript className=codemedium

[ Symbol . toPrimitive ] // but for Runtime !

// Restrict eslint rules for Binary Operations AOT
rules: {
	'no-restricted-syntax': ['error', {
		selector: 'BinaryExpression[operator=\'+\']',
		message : 'syntax protocol error: +'
	}, {
		selector: 'BinaryExpression[operator=\'>\']',
		message : 'syntax protocol error: >'
	}],
}
```

<Button onClick={() => { fetch('http://localhost:3001/example/05_NumberBinaryError')}}>Run Me</Button>

-----

# So we will Use ...

```javascript className=codegiantshift

[ Symbol . toPrimitive ]

// and
that . Proxy . example


```

-----

# So we will Use ...

```javascript className=codegiantshift

[ Symbol . toPrimitive ]

// and
that . Proxy . example

// for Strictness management

```

<Button onClick={() => { fetch('http://localhost:3001/example/07_NumberProxy')}}>Run Me</Button>

-----

# How will it Work then ...

```javascript className=codehugeshift

123 → new Number(123);

```

-----

# How will it Work then ...

```javascript className=codehugeshift

123 → new Number(123);      // → Proxy

```


-----

# How will it Work then ...

```javascript className=codehugeshift

123 → new Number(123);      // → Proxy

'123' → new String(123);


-----

# How will it Work then ...

```javascript className=codehugeshift

123 → new Number(123);      // → Proxy

'123' → new String(123);    // → Proxy




```

-----

# How will it Work then ...

```javascript className=codehugeshift

123 → new Number(123);      // → Proxy

'123' → new String(123);    // → Proxy

true → new Boolean(true);

```


-----

# How will it Work then ...

```javascript className=codehugeshift

123 → new Number(123);      // → Proxy

'123' → new String(123);    // → Proxy

true → new Boolean(true);   // → Proxy

```


-----

# How will it Work then ...

```javascript className=codehugeshift

123 → new Number(123);      // → Proxy

'123' → new String(123);    // → Proxy

true → new Boolean(true);   // → Proxy

null, undefined, Symbol & BigInt → !Strict



```


-----

# How will it Work then ...

```javascript className=codehugeshift

123 → new Number(123);      // → Proxy

'123' → new String(123);    // → Proxy

true → new Boolean(true);   // → Proxy

null, undefined, Symbol & BigInt → !Strict

Objects → Proxy(Objects)

```
-----

# How will it Work then ...

```javascript className=codehugeshift

123 → new Number(123);      // → Proxy

'123' → new String(123);    // → Proxy

true → new Boolean(true);   // → Proxy

null, undefined, Symbol & BigInt → !Strict

Objects → Proxy(Objects)    // → Proxy

```

-----

# How will it Work then ...

```javascript className=codehugeshift

123 → new Number(123);      // → Proxy

'123' → new String(123);    // → Proxy

true → new Boolean(true);   // → Proxy

null, undefined, Symbol & BigInt → !Strict

Objects → Proxy(Objects)    // → Proxy

```

<img src="./content/img/take_my_money.jpg" style={{position: 'absolute', top: '11vh', left:'61vw', zIndex: 100, width: '29vw'}} />

<Button onClick={() => { fetch('http://localhost:3001/example/08_TheDealExample_1')}}>Run Me</Button>



-----

-----

# How will it Work then ...

```javascript className=codehuge

Symbol.toPrimitive → (hint: 'number|string');


```
-----

# How will it Work then ...

```javascript className=codehuge

Symbol.toPrimitive → (hint: 'number|string');

Array, Object → PrototypeChain;


```
-----

# How will it Work then ...

```javascript className=codehuge

Symbol.toPrimitive → (hint: 'number|string');

Array, Object → PrototypeChain;

Set, Map, WeakSet, WeakMap → We need it?


```
-----

# How will it Work then ...

```javascript className=codehuge

Symbol.toPrimitive → (hint: 'number|string');

Array, Object → PrototypeChain;

.toJSON → !Strict

.getPrototypeOf → SOLID


```
-----

# How will it Work then ...

```javascript className=codehuge

Symbol.toPrimitive → (hint: 'number|string');

Array, Object → PrototypeChain;

.toJSON → !Strict

.getPrototypeOf → SOLID

Set, Map, WeakSet, WeakMap → We need it?

```


-----

# How will it Work then ...

```javascript className=codehuge

Symbol.toPrimitive → (hint: 'number|string');

Array, Object → PrototypeChain;

.toJSON → !Strict

.getPrototypeOf → SOLID

Set, Map, WeakSet, WeakMap → We need it?

```

<img src="./content/img/take_my_money.jpg" style={{position: 'absolute', top: '42vh', left:'65vw', zIndex: 100, width: '29vw'}} />

<Button onClick={() => { fetch('http://localhost:3001/example/08_TheDealExample_2')}}>Run Me</Button>

