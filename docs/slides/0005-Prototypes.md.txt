

<h1 style={{fontSize:'15vh', color: 'orange'}}>... intro ...</h1>

<h1 className="borderline">0</h1>



-----

# IMO : JavaScript is designed for ... Objects

```javascript className=codegiantshift

// .valueOf extracted nowhere

(5).valueOf() === 5 // true
```

-----

# IMO : JavaScript is designed for ... Objects

```javascript className=codegiantshift

// .valueOf extracted nowhere

(5).valueOf() === 5 // true

('5').valueOf() === '5' // true

```

-----

# IMO : JavaScript is designed for ... Objects

```javascript className=codegiantshift

// .valueOf extracted nowhere

(5).valueOf() === 5 // true

('5').valueOf() === '5' // true
(true).valueOf() === true // true

```

<Button onClick={() => { fetch('http://localhost:3001/example/00_valueOf')}}>Run Me</Button>

-----

# IMO : the sort of thinking JavaScript is designed for

```javascript className=codegiantshift
with (0) {
	console.log(
		Math.pow(
			valueOf(), valueOf()
		)
	);      // 1
}
```

<Button onClick={() => { fetch('http://localhost:3001/example/00_with_0')}}>Run Me</Button>

-----


# IMO : the sort of thinking JavaScript is designed for

```javascript className=codegiantshift

with ( [ 2, 5 ] ) {
	console.log(
		Math.pow(
			... reverse ()
		)
	);		// 25
}

```

<Button onClick={() => { fetch('http://localhost:3001/example/00_with')}}>Run Me</Button>

-----

# MDN statements : with

<Box sx={{textAlign: 'center'}}>
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with">
<img src="./content/img/withMDN.png" style={{marginTop: '2vh', width: '75vw'}} />
</a>
</Box>


-----

<Box sx={{marginTop: '25vh'}}>
<center>
<h1 style={{fontSize: '7vh', color: 'green'}}>if you look at `with` code</h1>
</center>
</Box>

-----

<Box sx={{marginTop: '25vh'}}>
<center>
<h1 style={{fontSize: '7vh', color: 'green'}}>if you look at `with` code</h1>
<h1 style={{fontSize: '8vh', color: 'orange'}}>for a long time</h1>
</center>
</Box>

-----

<Box sx={{marginTop: '25vh'}}>
<center>
	<h1 style={{fontSize: '7vh', color: 'green'}}>if you look at `with` code</h1>
	<h1 style={{fontSize: '8vh', color: 'orange'}}>for a long time</h1>
	<h1 style={{fontSize: '9vh'}}>then it peers on you</h1>
</center>
</Box>



-----

<Box sx={{marginTop: '25vh'}}>
<center>
<h1 style={{fontSize: '11vh', color: 'cyan'}}>How this can help us ?</h1>
</center>
</Box>

-----

<Box sx={{marginTop: '25vh'}}>
<center>
<h1 style={{fontSize: '11vh', color: 'cyan'}}>How this can help us ?</h1>
</center>
</Box>


<img src="./content/img/half_liter_mouse.jpg" style={{position: 'absolute', top: '50vh', left:'32vw', zIndex: 100, width: '35vw'}} />

-----

# Early Beginning Simpliest Prototypes Example

```javascript className=codehugeshift
// back to the 1995
var TheConstructor = function () {
	this;
	debugger;
};

var instance = new TheConstructor;
// we can see constructor definition
// made like this
```

<Button onClick={() => { fetch('http://localhost:3001/example/01_1995')}}>Run Me</Button>

-----

# that frightening picture

<Box>
<center>
<a href="http://ecma-international.org/ecma-262/#sec-objects">
<img src="./content/img/figure-1.svg"  style={{width: '70vw'}} />
</a>
</center>
</Box>

CF is a constructor (and also an object). Five objects have been created by using new expressions: cf1, cf2, cf3, cf4, and cf5. Each of these objects contains properties named "q1" and "q2". The dashed lines represent the implicit prototype relationship; so, for example, cf3's prototype is CFp. The constructor, CF, has two properties itself, named "P1" and "P2", which are not visible to CFp, cf1, cf2, cf3, cf4, or cf5. The property named "CFP1" in CFp is shared by cf1, cf2, cf3, cf4, and cf5 (but not by CF), as are any properties found in CFp's implicit prototype chain that are not named "q1", "q2", or "CFP1". Notice that there is no implicit prototype link between CF and CFp.

Unlike most class-based object languages, properties can be added to objects dynamically by assigning values to them. That is, constructors are not required to name or assign values to all or any of the constructed object's properties. In the above diagram, one could add a new shared property for cf1, cf2, cf3, cf4, and cf5 by assigning a new value to the property in CFp.

-----

# Let's take a look on How Deep is <br/> &nbsp; the bunny hole of the Prototype Chain ?

<Box>
<center>
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain">
<img src="./content/img/PrototypeChain.png"  style={{width: '70vw'}} />
</a>
</center>
</Box>

<Button onClick={() => { fetch('http://localhost:3001/example/PrototypeChainDeepnessTest')}}>Run Me</Button>

-----

<Box sx={{marginTop: '25vh', marginLeft: '15vw', fontFamily: 'Courier', fontSize:'3vh'}}>
	Let us remember, it was: December 4, 1995<br/>
	<br/>
	The More Developed languages had Class Based Ineritance<br/>
	But prototypes are way more simplier pattern.<br/>
	Just put something to the Constructors.prototype.<br/>
	And that is it -- it would be inherited.<br/>
	<br/>
		-- What for?
</Box>

-----
[{"snowflakes":true}]

<Box sx={{marginTop: '25vh', marginLeft: '15vw', fontFamily: 'Courier', fontSize:'3vh'}}>
	Let us remember, it was: December 4, 1995<br/>
	<br/>
	The More Developed languages had Class Based Ineritance<br/>
	But prototypes are way more simplier pattern.<br/>
	Just put something to the Constructors.prototype.<br/>
	And that is it -- it would be inherited.<br/>
	<br/>
		-- What for? Snowflakes, for sure!<br/>
</Box>

-----

# even more frightening modern picture
<center>
<img src="./content/img/EichObjects.png" style={{top: '15vh', zIndex: 100, width: '85vw'}} />
</center>


-----

# even more frightening modern picture
<center>
<img src="./content/JS_Object_Topology.svg" style={{top: '15vh', zIndex: 100, width: '85vw'}} />
</center>

-----

# even more frightening modern picture
<center>
<img src="./content/img/EichNullUndefined.png" style={{top: '15vh', zIndex: 100, width: '85vw'}} />
</center>


-----

# even more frightening modern picture
<center>
<img src="./content/JS_Object_Topology.svg" style={{top: '15vh', zIndex: 100, width: '85vw'}} />
</center>

-----


# so what if we can

<Box sx={{marginLeft:'5vw', marginTop:'0vh'}}>


* # leave assignment operaor only for Primitive Values
* ### &nbsp;&nbsp;&nbsp; → &nbsp;&nbsp;&nbsp; truthly speaking we can't get rid of it
* ### &nbsp;&nbsp;&nbsp; → &nbsp;&nbsp;&nbsp; as there is no assignment overload

</Box>

-----


# so what if we can

<Box sx={{marginLeft:'5vw', marginTop:'0vh'}}>


* # leave assignment operaor only for Primitive Values
* ### &nbsp;&nbsp;&nbsp; → &nbsp;&nbsp;&nbsp; truthly speaking we can't get rid of it
* ### &nbsp;&nbsp;&nbsp; → &nbsp;&nbsp;&nbsp; as there is no assignment overload

* # rely only on objects for Data Structures
* ### &nbsp;&nbsp;&nbsp; → &nbsp;&nbsp;&nbsp; prepare .eslint rules for this
* ### &nbsp;&nbsp;&nbsp; → &nbsp;&nbsp;&nbsp; respectively restrict code variability for this rules


</Box>

-----


# so what if we can

<Box sx={{marginLeft:'5vw', marginTop:'0vh'}}>


* # leave assignment operaor only for Primitive Values
* ### &nbsp;&nbsp;&nbsp; → &nbsp;&nbsp;&nbsp; truthly speaking we can't get rid of it
* ### &nbsp;&nbsp;&nbsp; → &nbsp;&nbsp;&nbsp; as there is no assignment overload


* # rely only on objects for Data Structures
* ### &nbsp;&nbsp;&nbsp; → &nbsp;&nbsp;&nbsp; prepare .eslint rules for this
* ### &nbsp;&nbsp;&nbsp; → &nbsp;&nbsp;&nbsp; respectively restrict code variability for this rules

* # provide impactfull JavaScript code for TS support
* ### &nbsp;&nbsp;&nbsp; → &nbsp;&nbsp;&nbsp; as JavaScript is Intermediate Language now
* ### &nbsp;&nbsp;&nbsp; → &nbsp;&nbsp;&nbsp; we may use Meta-Programming here
* ### &nbsp;&nbsp;&nbsp; → &nbsp;&nbsp;&nbsp; and do some tricky things with Proxies

</Box>


-----


# Let's take a look on How Deep is <br/> &nbsp; the bunny hole of the Prototype Chain ?


```javascript className=codegiant

// make base of all objects

const base = Object.create(null);

```

-----


# Let's take a look on How Deep is <br/> &nbsp; the bunny hole of the Prototype Chain ?


```javascript className=codehugeshift

const base = Object.create(null);

```

```javascript className=codegiant
// make proto for base

const proto = 
	new Proxy( proto, { get, set } );

```

-----


# Let's take a look on How Deep is <br/> &nbsp; the bunny hole of the Prototype Chain ?

```javascript className=codehugeshift

const base = Object.create(null);
const proto = new Proxy(base, { get, set });


```
```javascript className=codegiantshift

// define an instance

    const instance = {};
```

-----


# Let's take a look on How Deep is <br/> &nbsp; the bunny hole of the Prototype Chain ?

```javascript className=codehugeshift

const base = Object.create(null);
const proto = new Proxy(base, { get, set });
const instance = {};

```
```javascript className=codegiant
Reflect            // Inherit !
 .setPrototypeOf
       ( instance, proto );

```

-----


# Let's take a look on How Deep is <br/> &nbsp; the bunny hole of the Prototype Chain ?

```javascript className=codehugeshift

const base = Object.create(null);
const proto = new Proxy(base, { get, set });
const instance = {};

```
```javascript className=codegiant
Reflect            // Inherit !
 .setPrototypeOf
       ( instance, proto );

```


<Button onClick={() => { fetch('http://localhost:3001/example/00_Proxy')}}>Run Me</Button>
